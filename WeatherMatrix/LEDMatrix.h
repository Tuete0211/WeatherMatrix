//LEDMatrix.h
#ifndef LEDMATRIX_H
#define LEDMATRIX_H

//pin config
#define BRIGHTNESS_PIN 4  //D2
#define LED_PIN 1         //5         //D1
//layout config
#define MATRIX_WIDTH 10
#define MATRIX_HEIGHT 10
#define MATRIX_SPERPENTINE true
#define MATRIXVERTICAL false
#define NUM_LEDS (MATRIX_WIDTH * MATRIX_HEIGHT)

#include <Arduino.h>
#include <FastLED.h>

//led definition
#define COLOR_ORDER GRB
#define CHIPSET WS2811
CRGB leds_plus_safety_pixel[NUM_LEDS + 1];
CRGB* const leds(leds_plus_safety_pixel + 1);

/**
   font: https://squaregear.net/fonts/tiny.html
*/
struct {
  // numbers
  const unsigned int one[4][3] = { { 0, 1, 0 }, { 1, 1, 0 }, { 0, 1, 0 }, { 1, 1, 1 } };
  const unsigned int two[4][3] = { { 1, 1, 0 }, { 0, 0, 1 }, { 1, 0, 0 }, { 1, 1, 1 } };
  const unsigned int three[4][3] = { { 1, 1, 0 }, { 0, 1, 1 }, { 0, 0, 1 }, { 1, 1, 0 } };
  const unsigned int four[4][3] = { { 0, 0, 1 }, { 1, 0, 1 }, { 1, 1, 1 }, { 0, 0, 1 } };
  const unsigned int five[4][3] = { { 1, 1, 1 }, { 1, 0, 0 }, { 0, 0, 1 }, { 1, 1, 0 } };
  const unsigned int six[4][3] = { { 0, 1, 1 }, { 1, 0, 0 }, { 1, 1, 1 }, { 1, 1, 1 } };
  const unsigned int seven[4][3] = { { 1, 1, 1 }, { 0, 0, 1 }, { 0, 1, 0 }, { 1, 0, 0 } };
  const unsigned int eight[4][3] = { { 0, 1, 0 }, { 1, 1, 1 }, { 1, 0, 1 }, { 0, 1, 0 } };
  const unsigned int nine[4][3] = { { 0, 1, 1 }, { 1, 0, 1 }, { 1, 1, 1 }, { 0, 0, 1 } };
  const unsigned int zero[4][3] = { { 0, 1, 0 }, { 1, 0, 1 }, { 1, 0, 1 }, { 0, 1, 0 } };

  const unsigned int wave[10][10] = {
    { 0, 1, 2, 3, 4, 4, 3, 2, 1, 0 },
    { 1, 2, 3, 4, 5, 5, 4, 3, 2, 1 },
    { 2, 3, 4, 5, 6, 6, 5, 4, 3, 2 },
    { 3, 4, 5, 6, 7, 7, 6, 5, 4, 3 },
    { 4, 5, 6, 7, 8, 8, 7, 6, 5, 4 },
    { 4, 5, 6, 7, 8, 8, 7, 6, 5, 4 },
    { 3, 4, 5, 6, 7, 7, 6, 5, 4, 3 },
    { 2, 3, 2, 5, 6, 6, 5, 4, 3, 2 },
    { 1, 2, 3, 4, 5, 5, 4, 3, 2, 1 },
    { 0, 1, 2, 3, 4, 4, 3, 2, 1, 0 }
  };

  // weather icons
  const unsigned int cloudy[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x060606, 0x060606, 0x000000, 0x000000 },
    { 0xf8f8f8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf8f8f8, 0xf8f8f8, 0x000000, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int dark_cloudy[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb6b6b6, 0xb6b6b6, 0xafafaf, 0x000000 },
    { 0xf8f8f8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xfdfdfd, 0x050505, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int foggy[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x030303, 0x0f0f0f, 0x151515, 0x0a0a0a, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x515151, 0x878787, 0x9a9a9a, 0x8c8c8c, 0x565656, 0x323232, 0x151515 },
    { 0x000000, 0x7b7b7b, 0xc5c5c5, 0xd1d1d1, 0xc7c7c7, 0xbfbfbf, 0xc0c0c0, 0xcacaca, 0xb7b7b7, 0x6a6a6a },
    { 0x878787, 0xececec, 0xffffff, 0xc4c4c4, 0x999999, 0x909090, 0xa8a8a8, 0xc7c7c7, 0xf2f2f2, 0xcecece },
    { 0xebebeb, 0xffffff, 0xe0e0e0, 0xa0a0a0, 0x6e6e6e, 0x7c7c7c, 0xa1a1a1, 0xc4c4c4, 0xf9f9f9, 0xdadada },
    { 0xfefefe, 0xffffff, 0xe3e3e3, 0xa9a9a9, 0x777777, 0x8a8a8a, 0xb8b8b8, 0xf1f1f1, 0xe5e5e5, 0xa6a6a6 },
    { 0xffffff, 0xffffff, 0xd4d4d4, 0xacacac, 0x8e8e8e, 0xbfbfbf, 0xececec, 0xdadada, 0x8f8f8f, 0x3f3f3f },
    { 0x8e8e8e, 0xc0c0c0, 0xc0c0c0, 0xb9b9b9, 0xafafaf, 0xaaaaaa, 0x898989, 0x595959, 0x202020, 0x060606 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x020202, 0x090909, 0x070707, 0x030303, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int ice[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff },
    { 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xf9f9f9, 0x070707, 0xffffff, 0x000000, 0xffffff, 0x000000 },
    { 0xffffff, 0x000000, 0x000000, 0xffffff, 0xf9f9f9, 0x070707, 0xffffff, 0x000000, 0xffffff, 0x000000 },
    { 0xffffff, 0x000000, 0x000000, 0xffffff, 0xf3f3f3, 0x070707, 0x000000, 0x000000, 0xffffff, 0x000000 },
    { 0xffffff, 0x000000, 0x000000, 0xffffff, 0x060606, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int mostly_cloudy[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xb4b4b4, 0xb4b4b4, 0xfff200, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb6b6b6, 0xb6b6b6, 0xafafaf, 0x000000 },
    { 0xf8f8f8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xfdfdfd, 0x050505, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfff200, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int partly_sunny[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfff206, 0xfff206, 0x000000, 0x000000 },
    { 0xf8f8f8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffff8, 0xfffff8, 0x000000, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfff200, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int rain[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb6b6b6, 0xb6b6b6, 0xafafaf, 0x000000 },
    { 0xf8f8f8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xfdfdfd, 0x050505, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x2885c7, 0x000000, 0x000000 },
    { 0x000000, 0x2885c7, 0x000000, 0x2885c7, 0x010304, 0x2781c1, 0x000000, 0x2885c7, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x2885c7, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int showers[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x060606, 0x060606, 0x000000, 0x000000 },
    { 0xf8f8f8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xf8f8f8, 0xf8f8f8, 0x000000, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x2885c7, 0x000000, 0x000000, 0x2782c2, 0x010406, 0x2885c7, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x2782c2, 0x010406, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int snowing[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb6b6b6, 0xb6b6b6, 0xafafaf, 0x000000 },
    { 0xf8f8f8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xfdfdfd, 0x050505, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff },
    { 0x000000, 0xffffff, 0x000000, 0x000000, 0xf9f9f9, 0x070707, 0x000000, 0xffffff, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff },
    { 0xffffff, 0x000000, 0x000000, 0xffffff, 0x060606, 0xf8f8f8, 0x000000, 0xffffff, 0x000000, 0x000000 }
  };

  const unsigned int sunny[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int thunderstorm[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb6b6b6, 0xb6b6b6, 0xafafaf, 0x000000 },
    { 0xf8f8f8, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xfdfdfd, 0x050505, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfff206, 0xfffff8, 0xffffff, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xf9ed00, 0x070700, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int cold[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x4b6aed, 0x4d6df3, 0x4d6df3, 0x4d6df3, 0x4d6df3, 0x4b6aed, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x020306, 0x4d6df3, 0x4d6df3, 0x4d6df3, 0x4d6df3, 0x020306, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x4d6df3, 0x4d6df3, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int hot[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x060101, 0xed1c24, 0xed1c24, 0x060101, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xe71b23, 0xed1c24, 0xed1c24, 0xe71b23, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int partly_sunny_showers[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfff206, 0xfff206, 0x000000, 0x000000 },
    { 0xf9f9f9, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffff9, 0xfffff9, 0x000000, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfff200, 0x000000, 0x000000 },
    { 0x000000, 0x2885c7, 0x000000, 0xfff200, 0x2885c7, 0xf9f006, 0x2885c7, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x2885c7, 0x000506, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

  const unsigned int mostly_cloudy_showers[10][10] = {
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0xfff200, 0xb4b4b4, 0xb4b4b4, 0xfff200, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0xffffff, 0xffffff, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0xb4b4b4, 0x000000, 0x000000 },
    { 0x060606, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xb6b6b6, 0xb6b6b6, 0xafafaf, 0x000000 },
    { 0xf9f9f9, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xfdfdfd, 0x050505, 0x000000 },
    { 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfff200, 0x000000, 0x000000 },
    { 0x000000, 0x2885c7, 0x000000, 0xfff200, 0x2885c7, 0xf9f006, 0x2885c7, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x2885c7, 0x000506, 0x000000, 0x000000, 0x000000, 0x000000 },
    { 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 }
  };

} iconStorage;

/** icon ids
  [1-2]     sunny
  [3-5,21]  partly_sunny
  [6,20]    mostly_cloudy
  [7,19]    cloudy
  [8]       dark_cloudy
  [11]      foggy
  [12]      showers
  [13]  mostly_cloudy_showers
  [14]  partly_sunny_showers
  [15-17]      thunderstorm
  [18,26]   rain
  [22-23,25] snowing
  [24]      ice
  [30]  hot
  [31]  cold

  [32]  windy
*/

class LEDMatrix {
public:
  LEDMatrix() {
    FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
    FastLED.setBrightness(brightness);
    FastLED.clear();
  }

  void updateBrightness() {  // Read analog sensor to detect brightness
    int sensorWert = analogRead(BRIGHTNESS_PIN);
    int newBrightness;

    if (sensorWert < 30) newBrightness = 1;
    else if (sensorWert < 150) newBrightness = map(sensorWert, 30, 150, 1, 150);
    else if (sensorWert < 250) newBrightness = map(sensorWert, 150, 250, 150, 255);
    else newBrightness = 255;

    FastLED.setBrightness(newBrightness);
    brightness = newBrightness;

    /*
    if (DEBUG) {
      Serial.print("sensorWert: ");
      Serial.print(sensorWert);
      Serial.print(", newBrightness: ");
      Serial.println(brightness);
    }
    */
  }

  void clearMatrix() {
    for (int i = 0; i < NUM_LEDS; i++) {
      leds[i] = CRGB::Black;
    }
    FastLED.show();
  }

  void fadeToBlack() {
    for (int i = 0; i < 50; i++) {
      fadeToBlackBy(leds, NUM_LEDS, 31);
      delay(5);
      FastLED.show();
      delay(20);
    }
  }

  void drawWave(const CRGB color, bool resetCounter = false) {
    static int counter = 10;

    if (resetCounter)
      counter = 10;
    //fade all
    nscale8(leds, NUM_LEDS, 200);
    //for(int i = 0; i < NUM_LEDS; i++) { leds[i].nscale8(200); }

    // draw wave
    for (int y = 0; y < 10; y++) {
      for (int x = 0; x < 10; x++) {
        if (iconStorage.wave[y][x] == counter)
          leds[XY(x, y)] = color;
      }
    }
    if (--counter <= -9)
      counter = 10;
    delay(5);
    FastLED.show();
  }

  // ledMatrix.drawIcon(&IconStorage::cloudy);
  void drawIcon(const unsigned int (*icon)[10][10], int daysFromNow) {
    clearMatrix();

    // daysFromNow
    switch (daysFromNow) {
      case 0:
        leds[0] = CRGB(127, 127, 127);
        leds[1] = CRGB(127, 127, 127);
        break;
      case 1:
        leds[4] = CRGB(127, 127, 127);
        leds[5] = CRGB(127, 127, 127);
        break;
      case 2:
        leds[8] = CRGB(127, 127, 127);
        leds[9] = CRGB(127, 127, 127);
        break;
    }

    // draw icon
    for (int y = 0; y < 9; y++) {
      for (int x = 0; x < 10; x++) {
        leds[XY(x, y + 1)] = (*icon)[y][x];
      }
    }
    delay(5);
    FastLED.show();
  }

  void drawTemperatures(int max, int min, int daysFromNow) {
    clearMatrix();

    // daysFromNow
    switch (daysFromNow) {
      case 0:
        leds[0] = CRGB(127, 127, 127);
        leds[1] = CRGB(127, 127, 127);
        break;
      case 1:
        leds[4] = CRGB(127, 127, 127);
        leds[5] = CRGB(127, 127, 127);
        break;
      case 2:
        leds[8] = CRGB(127, 127, 127);
        leds[9] = CRGB(127, 127, 127);
        break;
    }

    // maximum
    if ((max / 10) > 0)
      placeNumber(3, 2, max / 10, CRGB(255, 0, 0));
    placeNumber(7, 2, max % 10, CRGB(255, 0, 0));

    // minimum
    if ((min / 10) > 0) {
      placeNumber(0, 6, min / 10, CRGB(0, 0, 255));
      placeNumber(4, 6, min % 10, CRGB(0, 0, 255));
    } else {
      placeNumber(0, 6, min % 10, CRGB(0, 0, 255));
    }

    delay(5);
    FastLED.show();
  }

  void drawTime(int hour, int minute) {
    clearMatrix();
    // hour
    placeNumber(0, 0, hour / 10, CRGB(127, 127, 127));
    placeNumber(4, 0, hour % 10, CRGB(127, 127, 127));

    // minute
    placeNumber(3, 6, minute / 10, CRGB(127, 127, 127));
    placeNumber(7, 6, minute % 10, CRGB(127, 127, 127));

    delay(5);
    FastLED.show();
  }

private:
  // functions for led localization
  uint16_t XY(uint8_t x, uint8_t y) {
    uint16_t i;
    if (MATRIX_SPERPENTINE == false) {
      if (MATRIXVERTICAL == false) {
        i = (y * MATRIX_WIDTH) + x;
      } else {
        i = MATRIX_HEIGHT * (MATRIX_WIDTH - (x + 1)) + y;
      }
    }
    if (MATRIX_SPERPENTINE == true) {
      if (MATRIXVERTICAL == false) {
        if (y & 0x01) {
          // Odd rows run backwards
          uint8_t reverseX = (MATRIX_WIDTH - 1) - x;
          i = (y * MATRIX_WIDTH) + reverseX;
        } else {
          // Even rows run forwards
          i = (y * MATRIX_WIDTH) + x;
        }
      } else {  // vertical positioning
        if (x & 0x01) {
          i = MATRIX_HEIGHT * (MATRIX_WIDTH - (x + 1)) + y;
        } else {
          i = MATRIX_HEIGHT * (MATRIX_WIDTH - x) - (y + 1);
        }
      }
    }
    return i;
  }

  uint16_t XYsafe(uint8_t x, uint8_t y) {
    if (x >= MATRIX_WIDTH) return -1;
    if (y >= MATRIX_HEIGHT) return -1;
    return XY(x, y);
  }

  void fadeall() {
    for (int i = 0; i < NUM_LEDS; i++) { leds[i].nscale8(127); }
  }

  void placeNumber(int originX, int originY, int number, const CRGB color) {
    // get the right stencil
    const unsigned int(*stencil)[4][3];

    switch (number) {
      case 0:
        stencil = &iconStorage.zero;
        break;
      case 1:
        stencil = &iconStorage.one;
        break;
      case 2:
        stencil = &iconStorage.two;
        break;
      case 3:
        stencil = &iconStorage.three;
        break;
      case 4:
        stencil = &iconStorage.four;
        break;
      case 5:
        stencil = &iconStorage.five;
        break;
      case 6:
        stencil = &iconStorage.six;
        break;
      case 7:
        stencil = &iconStorage.seven;
        break;
      case 8:
        stencil = &iconStorage.eight;
        break;
      case 9:
        stencil = &iconStorage.nine;
        break;
      default:
        stencil = &iconStorage.zero;
    }

    for (int y = 0; y < 4; y++) {
      for (int x = 0; x < 3; x++) {
        if ((*stencil)[y][x] != 0)
          leds[XY(originX + x, originY + y)] = color;
      }
    }
  }

  float brightness = 127;  // 0-255
};

#endif

// END OF FILE